// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20181012111028_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("Duration");

                    b.Property<int>("MaxParticipants");

                    b.Property<string>("Text");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DAL.Models.Calender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("DefaultDuration");

                    b.HasKey("Id");

                    b.ToTable("Calenders");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DAL.Models.DayOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CalenderId");

                    b.Property<DateTime>("OffDay");

                    b.HasKey("Id");

                    b.HasIndex("CalenderId");

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("DAL.Models.Expert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("ExpertCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertCategoryId");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.CalenderAppointment", b =>
                {
                    b.Property<Guid>("CalenderId");

                    b.Property<Guid>("AppointmentId");

                    b.HasKey("CalenderId", "AppointmentId");

                    b.ToTable("CalenderAppointments");
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.ExpertTag", b =>
                {
                    b.Property<Guid>("ExpertId");

                    b.Property<Guid>("TagId");

                    b.Property<Guid?>("ExpertId1");

                    b.Property<Guid?>("TagId1");

                    b.HasKey("ExpertId", "TagId");

                    b.HasIndex("ExpertId1");

                    b.HasIndex("TagId");

                    b.HasIndex("TagId1");

                    b.ToTable("ExpertTags");
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.UserTag", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("TagId");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Anonymity");

                    b.Property<Guid?>("ExpertId");

                    b.Property<string>("Name");

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewText");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DAL.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid?>("AppointmentId");

                    b.Property<DateTime>("Birthday");

                    b.Property<Guid?>("CalenderId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsExpert");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CalenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Models.WorkDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CalenderId");

                    b.Property<int>("DayOfWeek");

                    b.Property<DateTime>("EndHour");

                    b.Property<DateTime>("StartHour");

                    b.HasKey("Id");

                    b.HasIndex("CalenderId");

                    b.ToTable("WorkDays");
                });

            modelBuilder.Entity("DAL.Models.DayOff", b =>
                {
                    b.HasOne("DAL.Models.Calender")
                        .WithMany("DaysOff")
                        .HasForeignKey("CalenderId");
                });

            modelBuilder.Entity("DAL.Models.Expert", b =>
                {
                    b.HasOne("DAL.Models.Category", "ExpertCategory")
                        .WithMany()
                        .HasForeignKey("ExpertCategoryId");
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.CalenderAppointment", b =>
                {
                    b.HasOne("DAL.Models.Appointment", "Appointment")
                        .WithMany("Calenders")
                        .HasForeignKey("CalenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Calender", "Calender")
                        .WithMany("Appointments")
                        .HasForeignKey("CalenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.ExpertTag", b =>
                {
                    b.HasOne("DAL.Models.Expert", "Expert")
                        .WithMany("ExpertTags")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Expert")
                        .WithMany("MainFields")
                        .HasForeignKey("ExpertId1");

                    b.HasOne("DAL.Models.Tag", "Tag")
                        .WithMany("ExpertsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Tag")
                        .WithMany("ExpertsMainField")
                        .HasForeignKey("TagId1");
                });

            modelBuilder.Entity("DAL.Models.ManyToMany.UserTag", b =>
                {
                    b.HasOne("DAL.Models.Tag", "Tag")
                        .WithMany("UsersTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("InterestTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.HasOne("DAL.Models.Expert")
                        .WithMany("Reviews")
                        .HasForeignKey("ExpertId");
                });

            modelBuilder.Entity("DAL.Models.Tag", b =>
                {
                    b.HasOne("DAL.Models.Category")
                        .WithMany("Tags")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.HasOne("DAL.Models.Appointment")
                        .WithMany("Participants")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("DAL.Models.Calender", "Calender")
                        .WithMany()
                        .HasForeignKey("CalenderId");
                });

            modelBuilder.Entity("DAL.Models.WorkDay", b =>
                {
                    b.HasOne("DAL.Models.Calender")
                        .WithMany("WorkDays")
                        .HasForeignKey("CalenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
